% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipe.R
\name{new_pipe}
\alias{new_pipe}
\title{Define a new pipe}
\usage{
new_pipe(format_fun, compound_fun = NULL)
}
\arguments{
\item{format_fun}{a function taking an argument \code{call}, which will be fed the quoted
rhs, and should return the quoted expression of what the pipe should do.}

\item{compound_fun}{either \code{NULL} or a function taking arguments \code{lhs} and \code{res}
which are respectively the quoted first element of the pipe chain and the result of
the pipe chain, and should return a quoted expression to executre in the
parent environment.

This pipe constructir is best understood by examples below and by the use of the
\code{\%B>\%} pipe.}
}
\description{
All pipes of the package, including \code{\%>\%} and \code{\%<>\%}, are defined using this
general approach.
}
\examples{
# let's build a standard pipe (it's the code used to create `\%>\%`)
`\%>>>\%` <- new_pipe(
  function(call){
    # add explicit dots at the right place in rhs
    call <- insert_dot(call)
    # the new dot should be equal to the call
    bquote(. <- .(call))
  })
iris \%>>>\% head() \%>>>\% dim()
# let's build a compound pipe (it's the code used to create `\%>\%`)
`\%<>>>\%` <- new_pipe(
  function(call){
    call <- insert_dot(call)
    bquote(. <- .(call))
  },
  function(lhs, res){
    substitute(lhs <- res)
  })
x <- iris
x \%<>>>\% head() \%>>>\% dim()
x
}
